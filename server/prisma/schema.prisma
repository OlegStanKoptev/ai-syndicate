// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  expert
  admin
  developer
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role    UserRole
  balance Int?

  email           String  @unique
  passwordHash    String
  fullName        String?
  avatarImageFile String?
  orgName         String?
  shortOrgName    String?
  inn             String?
  ogrn            String?
  kpp             String?
  legalAddress    String?
  actualAddress   String?
  website         String?
  phone           String?

  startupsCreated       Startup[]
  votesNewStartup       VoteNewStartup[]
  investments           Investment[]
  applicationsDeveloper ApplicationDeveloper[]
}

enum StartupStatus {
  verification
  verification_failed
  verification_succeded
  financing
  financing_failed
  financing_succeded
  developerApplication
}

model Startup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status            StartupStatus
  startuperId       String
  targetFinancing   Int
  name              String
  description       String
  logoFile          String?
  specificationFile String
  businessPlanFile  String?
  presentationFile  String?

  financingDeadline            DateTime?
  developerApplicationDeadline DateTime?

  startuper             User                   @relation(fields: [startuperId], references: [id])
  investments           Investment[]
  votesNewStartup       VoteNewStartup[]
  applicationsDeveloper ApplicationDeveloper[]
}

model VoteNewStartup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startupId String
  expertId  String
  yea       Boolean
  nayReason String?

  startup Startup @relation(fields: [startupId], references: [id])
  expert  User    @relation(fields: [expertId], references: [id])

  @@unique([startupId, expertId])
}

model Investment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  amount     Int
  investorId String
  startupId  String

  investor User    @relation(fields: [investorId], references: [id])
  startup  Startup @relation(fields: [startupId], references: [id])
}

enum ApplicationNewDeveloperStatus {
  new
  approved
  declined
}

model ApplicationNewDeveloper {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status        ApplicationNewDeveloperStatus
  declineReason String?

  email           String
  passwordHash    String
  avatarImageFile String?
  orgName         String
  shortOrgName    String
  inn             String
  ogrn            String
  kpp             String
  legalAddress    String
  actualAddress   String
  website         String
  phone           String?
}

enum ApplicationDeveloperStatus {
  new
}

model ApplicationDeveloper {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startupId   String
  developerId String
  status      ApplicationDeveloperStatus
  message     String

  startup   Startup @relation(fields: [startupId], references: [id])
  developer User    @relation(fields: [developerId], references: [id])
}
