// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  id                String @id @default(cuid())
  additionalSeconds Int
}

enum UserRole {
  user
  expert
  admin
  developer
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role        UserRole
  balance     Int?
  createdById String?

  email           String  @unique
  passwordHash    String
  fullName        String?
  avatarImageFile String?
  orgName         String?
  shortOrgName    String?
  inn             String?
  ogrn            String?
  kpp             String?
  legalAddress    String?
  actualAddress   String?
  website         String?
  phone           String?

  startupsCreated                            Startup[]
  votesNewStartup                            VoteNewStartup[]
  investments                                Investment[]
  applicationsDeveloper                      ApplicationDeveloper[]
  creatorOfExperts                           User[]                     @relation(name: "AdminExpertCreation")
  createdBy                                  User?                      @relation(name: "AdminExpertCreation", fields: [createdById], references: [id])
  approvedOrDeclinedApplicationsNewDeveloper ApplicationNewDeveloper[]
  createdFromApplication                     ApplicationNewDeveloper?   @relation(name: "DeveloperAndDeveloperApplication")
  deposits                                   Deposit[]
  refunds                                    Refund[]
  votesDeveloperApplication                  VoteDeveloperApplication[]
  startupsDeveloping                         Startup[]                  @relation(name: "StartupDeveloper")
}

enum StartupStatus {
  verification
  verification_failed
  verification_succeded
  financing
  financing_failed
  financing_succeded
  developerApplication
  developerApplication_succeded
  developerVoting
  developerVoting_succeded
  development
  development_succeded
  finished
}

model Startup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status            StartupStatus
  startuperId       String
  targetFinancing   Int
  name              String
  description       String
  logoFile          String?
  specificationFile String
  businessPlanFile  String?
  presentationFile  String?

  developerId String?
  reportFile  String?

  verificationEndedAt         DateTime?
  financingEndedAt            DateTime?
  developerApplicationEndedAt DateTime?
  developerVotingEndedAt      DateTime?
  developmentEndedAt          DateTime?

  financingDeadline            DateTime?
  developerApplicationDeadline DateTime?
  developerVotingDeadline      DateTime?
  developmentDeadline          DateTime?

  startuper             User                   @relation(fields: [startuperId], references: [id])
  investments           Investment[]
  votesNewStartup       VoteNewStartup[]
  applicationsDeveloper ApplicationDeveloper[]
  developer             User?                  @relation(name: "StartupDeveloper", fields: [developerId], references: [id])
}

model VoteNewStartup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startupId String
  expertId  String
  yea       Boolean
  nayReason String?

  startup Startup @relation(fields: [startupId], references: [id])
  expert  User    @relation(fields: [expertId], references: [id])

  @@unique([startupId, expertId])
}

model Deposit {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  amount     Int
  investorId String

  investor User @relation(fields: [investorId], references: [id])
}

model Investment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  amount     Int
  investorId String
  startupId  String

  investor User    @relation(fields: [investorId], references: [id])
  startup  Startup @relation(fields: [startupId], references: [id])
}

model Refund {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  amount     Int
  investorId String

  investor User @relation(fields: [investorId], references: [id])
}

enum ApplicationNewDeveloperStatus {
  new
  approved
  declined
}

model ApplicationNewDeveloper {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status                 ApplicationNewDeveloperStatus
  declineReason          String?
  approvedOrDeclinedById String?
  approvedOrDeclinedAt   DateTime?
  createdDeveloperId     String?                       @unique

  email           String
  passwordHash    String
  avatarImageFile String?
  orgName         String
  shortOrgName    String
  inn             String
  ogrn            String
  kpp             String
  legalAddress    String
  actualAddress   String
  website         String
  phone           String?

  approvedOrDeclinedBy User? @relation(fields: [approvedOrDeclinedById], references: [id])
  createdDeveloper     User? @relation(name: "DeveloperAndDeveloperApplication", fields: [createdDeveloperId], references: [id])
}

model ApplicationDeveloper {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startupId   String
  developerId String
  message     String

  startup   Startup                    @relation(fields: [startupId], references: [id])
  developer User                       @relation(fields: [developerId], references: [id])
  votes     VoteDeveloperApplication[]
}

model VoteDeveloperApplication {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applicationDeveloperId String
  voterId                String

  applicationDeveloper ApplicationDeveloper @relation(fields: [applicationDeveloperId], references: [id])
  voter                User                 @relation(fields: [voterId], references: [id])

  @@unique([applicationDeveloperId, voterId])
}
